generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user         String    @id @default(cuid())
  name            String
  password        String
  role            ROLE
  phone           String    @unique
  deleted         Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  otp             String?
  otp_exp         DateTime?
  reset_token     String? 
  reset_token_exp DateTime?
  tenants         Tenant?
}

model Tenant {
  id_tenant   String    @id @default(cuid())
  userId      String    @unique
  full_name   String
  address     String
  no_ktp      String
  status      STATUS
  no_telp     String
  tagihan     Int       @default(0)
  jatuh_tempo DateTime
  deleted     Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  finances    Finance[]
  rentData    RentData?
  reports     Report[]
  user        User      @relation(fields: [userId], references: [id_user])
}

model RentData {
  id_rent    String    @id @default(cuid())
  tenantId   String    @unique
  roomId     String
  rent_date  DateTime
  rent_out   DateTime?
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  finances   Finance[]
  room       Room      @relation(fields: [roomId], references: [id_room])
  tenant     Tenant    @relation(fields: [tenantId], references: [id_tenant])
}

model Room {
  id_room     String         @id @default(cuid())
  id_roomtype String
  status      ROOMSTATUS
  deleted     Boolean        @default(false)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  rentData    RentData[]
  roomType    RoomType       @relation(fields: [id_roomtype], references: [id_roomtype])
  facilities  RoomFacility[]
}

model RoomType {
  id_roomtype String   @id @default(cuid())
  room_type   String
  price       Int
  image       String?
  deleted     Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  facilities Facility[] @relation("RoomTypeFacilities")
  rooms      Room[]
}

model Report {
  id_report   String       @id @default(cuid())
  id_tenant   String
  id_facility String
  report_desc String
  report_date DateTime
  status      REPORTSTATUS
  deleted     Boolean      @default(false)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  facility    Facility     @relation(fields: [id_facility], references: [id_facility])
  tenant      Tenant       @relation(fields: [id_tenant], references: [id_tenant])
}

model Facility {
  id_facility   String   @id @default(cuid())
  facility_name String
  desc          String
  deleted       Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  roomTypes RoomType[]     @relation("RoomTypeFacilities")
  reports   Report[]
  rooms     RoomFacility[]
}

model Finance {
  id_finance   String    @id @default(cuid())
  id_tenant    String?
  id_rent      String?
  type         INOUT
  category     String
  amount       Int
  payment_date DateTime
  deleted      Boolean   @default(false)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  rentData     RentData? @relation(fields: [id_rent], references: [id_rent])
  tenant       Tenant?   @relation(fields: [id_tenant], references: [id_tenant])
}

model RoomFacility {
  id          String @id @default(cuid())
  id_room     String
  id_facility String

  room     Room     @relation(fields: [id_room], references: [id_room])
  facility Facility @relation(fields: [id_facility], references: [id_facility])

  @@unique([id_room, id_facility])
}

enum STATUS {
  SINGLE
  MARRIED
}

enum ROLE {
  ADMIN
  TENANT
}

enum ROOMSTATUS {
  AVAILABLE
  NOTAVAILABLE
}

enum REPORTSTATUS {
  PENDING
  COMPLETED
}

enum INOUT {
  INCOME
  OUTCOME
}
